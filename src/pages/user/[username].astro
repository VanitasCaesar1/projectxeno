---
import Layout from "../../layout/layout.astro";
import Header from "../../components/Header.astro";
import UserProfile from "../../components/UserProfile.astro";
import { supabase } from '../../lib/supabase';
import { calculateUserStats, isFollowingUser } from '../../lib/userStats';

// Get username from URL params
const { username } = Astro.params;

if (!username) {
  return Astro.redirect("/404");
}

// Check if current user is authenticated
const accessToken = Astro.cookies.get("sb-access-token");
const refreshToken = Astro.cookies.get("sb-refresh-token");

let currentUser = null;
if (accessToken && refreshToken) {
  supabase.auth.setSession({
    access_token: accessToken.value,
    refresh_token: refreshToken.value,
  });

  const { data: { user } } = await supabase.auth.getUser();
  currentUser = user;
}

// Get target user profile by username
const { data: profile, error: profileError } = await supabase
  .from('user_profiles')
  .select('*')
  .eq('username', username)
  .single();

if (profileError || !profile) {
  return Astro.redirect("/404");
}

// Check if this is the current user's own profile
const isOwnProfile = currentUser?.id === profile.id;

// If it's their own profile, redirect to /profile
if (isOwnProfile) {
  return Astro.redirect("/profile");
}

// Check privacy settings
if (!currentUser && profile.privacy_level !== 'public') {
  return Astro.redirect("/login");
}

if (currentUser && profile.privacy_level === 'private') {
  return Astro.redirect("/403");
}

// Check if friends-only and not following
let isFollowing = false;
if (currentUser && profile.privacy_level === 'friends') {
  isFollowing = await isFollowingUser(currentUser.id, profile.id);
  if (!isFollowing) {
    return Astro.redirect("/403");
  }
} else if (currentUser) {
  isFollowing = await isFollowingUser(currentUser.id, profile.id);
}

// Get user preferences (only if public or following)
let preferences = null;
if (profile.privacy_level === 'public' || isFollowing) {
  const { data: userPreferences } = await supabase
    .from('user_preferences')
    .select('*')
    .eq('user_id', profile.id)
    .single();
  preferences = userPreferences;
}

// Calculate user statistics
const stats = await calculateUserStats(profile.id);

// Get user's public activity if allowed
let recentActivity = [];
if (profile.privacy_level === 'public' || isFollowing) {
  const { data: activity } = await supabase
    .from('user_media')
    .select(`
      *,
      media:media_items(title, media_type, poster_url, release_date)
    `)
    .eq('user_id', profile.id)
    .order('updated_at', { ascending: false })
    .limit(10);
  
  recentActivity = activity || [];
}

// Page title
const pageTitle = `${profile.display_name || profile.username} - Profile`;
---

<Layout title={pageTitle}>
  <main>
    <Header />
    
    <div class="min-h-screen bg-gray-50 dark:bg-gray-900 py-8">
      <div class="max-w-4xl mx-auto px-4 sm:px-6 lg:px-8">
        <!-- User Profile Component -->
        <UserProfile 
          profile={profile} 
          preferences={preferences} 
          stats={stats} 
          isOwnProfile={false}
          isFollowing={isFollowing}
        />

        <!-- Recent Activity (if allowed to view) -->
        {(profile.privacy_level === 'public' || isFollowing) && recentActivity.length > 0 && (
          <div class="mt-8 bg-white dark:bg-gray-800 shadow rounded-lg">
            <div class="px-6 py-4 border-b border-gray-200 dark:border-gray-700">
              <h2 class="text-lg font-medium text-gray-900 dark:text-white">Recent Activity</h2>
            </div>
            <div class="p-6">
              <div class="space-y-4">
                {recentActivity.map((activity) => (
                  <div key={activity.id} class="flex items-center space-x-4 p-4 bg-gray-50 dark:bg-gray-700 rounded-lg">
                    <div class="flex-shrink-0">
                      {activity.media?.poster_url ? (
                        <img 
                          src={activity.media.poster_url} 
                          alt={activity.media.title}
                          class="h-16 w-12 object-cover rounded"
                        />
                      ) : (
                        <div class="h-16 w-12 bg-gray-300 dark:bg-gray-600 rounded flex items-center justify-center">
                          <svg class="h-6 w-6 text-gray-400" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M7 4V2a1 1 0 011-1h8a1 1 0 011 1v2h4a1 1 0 110 2h-1v12a2 2 0 01-2 2H6a2 2 0 01-2-2V6H3a1 1 0 110-2h4z" />
                          </svg>
                        </div>
                      )}
                    </div>
                    <div class="flex-1 min-w-0">
                      <p class="text-sm font-medium text-gray-900 dark:text-white">
                        {activity.media?.title}
                      </p>
                      <p class="text-sm text-gray-500 dark:text-gray-400 capitalize">
                        {activity.status.replace('_', ' ')} • {activity.media?.media_type}
                      </p>
                      {activity.rating && preferences?.public_ratings && (
                        <div class="flex items-center mt-1">
                          <span class="text-sm text-yellow-500">★</span>
                          <span class="text-sm text-gray-600 dark:text-gray-400 ml-1">{activity.rating}/10</span>
                        </div>
                      )}
                    </div>
                    <div class="text-sm text-gray-500 dark:text-gray-400">
                      {new Date(activity.updated_at).toLocaleDateString()}
                    </div>
                  </div>
                ))}
              </div>
            </div>
          </div>
        )}

        <!-- Private Profile Message -->
        {profile.privacy_level !== 'public' && !isFollowing && (
          <div class="mt-8 bg-white dark:bg-gray-800 shadow rounded-lg">
            <div class="p-12 text-center">
              <div class="text-gray-400 dark:text-gray-500 mb-4">
                <svg class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 15v2m-6 4h12a2 2 0 002-2v-6a2 2 0 00-2-2H6a2 2 0 00-2 2v6a2 2 0 002 2zm10-10V7a4 4 0 00-8 0v4h8z" />
                </svg>
              </div>
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">Private Profile</h3>
              <p class="text-gray-500 dark:text-gray-400">
                This user's activity is private. Follow them to see their lists and activity.
              </p>
            </div>
          </div>
        )}

        <!-- Empty State for Public Profiles -->
        {profile.privacy_level === 'public' && recentActivity.length === 0 && (
          <div class="mt-8 bg-white dark:bg-gray-800 shadow rounded-lg">
            <div class="p-12 text-center">
              <div class="text-gray-400 dark:text-gray-500 mb-4">
                <svg class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
                </svg>
              </div>
              <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No activity yet</h3>
              <p class="text-gray-500 dark:text-gray-400">
                {profile.display_name || profile.username} hasn't started tracking any media yet.
              </p>
            </div>
          </div>
        )}
      </div>
    </div>
  </main>
</Layout>