---
interface Props {
  showPublic?: boolean;
  limit?: number;
}

const { showPublic = false, limit = 10 } = Astro.props;
---

<div class="saved-searches bg-white dark:bg-gray-800 rounded-lg shadow-md p-6">
  <div class="flex items-center justify-between mb-4">
    <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">
      {showPublic ? 'Popular Searches' : 'Saved Searches'}
    </h3>
    <button 
      id="refresh-saved-searches"
      class="text-sm text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 transition-colors"
    >
      <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
      </svg>
    </button>
  </div>

  <div id="saved-searches-list" class="space-y-3">
    <!-- Loading state -->
    <div class="loading-state">
      <div class="animate-pulse space-y-3">
        {Array.from({ length: 3 }, (_, i) => (
          <div class="flex items-center justify-between p-3 bg-gray-100 dark:bg-gray-700 rounded-md">
            <div class="flex-1">
              <div class="h-4 bg-gray-300 dark:bg-gray-600 rounded w-3/4 mb-2"></div>
              <div class="h-3 bg-gray-300 dark:bg-gray-600 rounded w-1/2"></div>
            </div>
            <div class="w-8 h-8 bg-gray-300 dark:bg-gray-600 rounded"></div>
          </div>
        ))}
      </div>
    </div>

    <!-- Empty state -->
    <div id="empty-state" class="hidden text-center py-8">
      <svg class="mx-auto h-12 w-12 text-gray-400" fill="none" viewBox="0 0 24 24" stroke="currentColor">
        <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
      </svg>
      <h3 class="mt-2 text-sm font-medium text-gray-900 dark:text-gray-100">No saved searches</h3>
      <p class="mt-1 text-sm text-gray-500 dark:text-gray-400">
        {showPublic ? 'No popular searches available.' : 'Save your searches to access them quickly later.'}
      </p>
    </div>
  </div>

  {!showPublic && (
    <div class="mt-4 pt-4 border-t border-gray-200 dark:border-gray-600">
      <button
        id="create-saved-search"
        class="w-full px-4 py-2 text-sm font-medium text-blue-700 bg-blue-100 hover:bg-blue-200 dark:bg-blue-900 dark:text-blue-300 dark:hover:bg-blue-800 rounded-md transition-colors"
      >
        + Create New Saved Search
      </button>
    </div>
  )}
</div>

<!-- Save Search Modal -->
<div id="save-search-modal" class="fixed inset-0 bg-black bg-opacity-50 hidden z-50">
  <div class="flex items-center justify-center min-h-screen p-4">
    <div class="bg-white dark:bg-gray-800 rounded-lg shadow-xl max-w-md w-full p-6">
      <div class="flex items-center justify-between mb-4">
        <h3 class="text-lg font-semibold text-gray-900 dark:text-gray-100">Save Search</h3>
        <button id="close-save-modal" class="text-gray-400 hover:text-gray-600 dark:hover:text-gray-300">
          <svg class="w-6 h-6" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M6 18L18 6M6 6l12 12" />
          </svg>
        </button>
      </div>

      <form id="save-search-form" class="space-y-4">
        <div>
          <label for="search-name" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Search Name
          </label>
          <input
            type="text"
            id="search-name"
            name="name"
            required
            maxlength="100"
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent bg-white dark:bg-gray-700 text-gray-900 dark:text-gray-100"
            placeholder="Enter a name for this search"
          />
        </div>

        <div>
          <label for="search-query-display" class="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-1">
            Search Query
          </label>
          <input
            type="text"
            id="search-query-display"
            readonly
            class="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm bg-gray-50 dark:bg-gray-600 text-gray-900 dark:text-gray-100"
          />
        </div>

        <div class="flex items-center">
          <input
            type="checkbox"
            id="is-public"
            name="isPublic"
            class="rounded border-gray-300 text-blue-600 shadow-sm focus:border-blue-300 focus:ring focus:ring-blue-200 focus:ring-opacity-50"
          />
          <label for="is-public" class="ml-2 text-sm text-gray-700 dark:text-gray-300">
            Make this search public (others can see and use it)
          </label>
        </div>

        <div class="flex justify-end gap-3 pt-4">
          <button
            type="button"
            id="cancel-save"
            class="px-4 py-2 text-sm font-medium text-gray-700 dark:text-gray-300 bg-gray-100 dark:bg-gray-600 hover:bg-gray-200 dark:hover:bg-gray-500 rounded-md transition-colors"
          >
            Cancel
          </button>
          <button
            type="submit"
            class="px-4 py-2 text-sm font-medium text-white bg-blue-600 hover:bg-blue-700 rounded-md transition-colors"
          >
            Save Search
          </button>
        </div>
      </form>
    </div>
  </div>
</div>

<script>
  interface SavedSearch {
    id: string;
    name: string;
    query: string;
    filters: any;
    is_public: boolean;
    created_at: string;
    updated_at: string;
    user?: {
      username: string;
      display_name?: string;
      avatar_url?: string;
    };
  }

  class SavedSearches {
    private container: HTMLElement;
    private listContainer: HTMLElement;
    private loadingState: HTMLElement;
    private emptyState: HTMLElement;
    private modal: HTMLElement;
    private showPublic: boolean;
    private limit: number;

    constructor() {
      this.container = document.querySelector('.saved-searches') as HTMLElement;
      this.listContainer = document.getElementById('saved-searches-list') as HTMLElement;
      this.loadingState = this.listContainer.querySelector('.loading-state') as HTMLElement;
      this.emptyState = document.getElementById('empty-state') as HTMLElement;
      this.modal = document.getElementById('save-search-modal') as HTMLElement;
      
      // Get props from data attributes or defaults
      this.showPublic = this.container.dataset.showPublic === 'true';
      this.limit = parseInt(this.container.dataset.limit || '10');
      
      this.init();
      this.loadSavedSearches();
    }

    private init() {
      // Refresh button
      const refreshButton = document.getElementById('refresh-saved-searches');
      refreshButton?.addEventListener('click', () => this.loadSavedSearches());

      // Create new search button
      const createButton = document.getElementById('create-saved-search');
      createButton?.addEventListener('click', () => this.showSaveModal());

      // Modal controls
      const closeModal = document.getElementById('close-save-modal');
      const cancelSave = document.getElementById('cancel-save');
      const saveForm = document.getElementById('save-search-form') as HTMLFormElement;

      closeModal?.addEventListener('click', () => this.hideSaveModal());
      cancelSave?.addEventListener('click', () => this.hideSaveModal());
      saveForm?.addEventListener('submit', (e) => this.handleSaveSearch(e));

      // Close modal on backdrop click
      this.modal?.addEventListener('click', (e) => {
        if (e.target === this.modal) {
          this.hideSaveModal();
        }
      });
    }

    private async loadSavedSearches() {
      this.showLoading();

      try {
        const params = new URLSearchParams({
          limit: this.limit.toString(),
          ...(this.showPublic && { includePublic: 'true' })
        });

        const response = await fetch(`/api/search/saved?${params}`, {
          headers: {
            'Authorization': 'Bearer ' + (localStorage.getItem('auth_token') || '')
          }
        });

        if (!response.ok) {
          throw new Error('Failed to load saved searches');
        }

        const data = await response.json();
        this.renderSavedSearches(data.data || []);
      } catch (error) {
        console.error('Error loading saved searches:', error);
        this.showError('Failed to load saved searches');
      }
    }

    private showLoading() {
      this.loadingState.classList.remove('hidden');
      this.emptyState.classList.add('hidden');
      
      // Hide existing search items
      const existingItems = this.listContainer.querySelectorAll('.saved-search-item');
      existingItems.forEach(item => item.remove());
    }

    private renderSavedSearches(searches: SavedSearch[]) {
      this.loadingState.classList.add('hidden');
      
      // Clear existing items
      const existingItems = this.listContainer.querySelectorAll('.saved-search-item');
      existingItems.forEach(item => item.remove());

      if (searches.length === 0) {
        this.emptyState.classList.remove('hidden');
        return;
      }

      this.emptyState.classList.add('hidden');

      searches.forEach(search => {
        const item = this.createSearchItem(search);
        this.listContainer.appendChild(item);
      });
    }

    private createSearchItem(search: SavedSearch): HTMLElement {
      const item = document.createElement('div');
      item.className = 'saved-search-item flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-md hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors cursor-pointer';
      
      const hasFilters = search.filters && Object.keys(search.filters).length > 0;
      const filterCount = hasFilters ? Object.keys(search.filters).length : 0;

      item.innerHTML = `
        <div class="flex-1 min-w-0" data-search-id="${search.id}">
          <div class="flex items-center gap-2 mb-1">
            <h4 class="font-medium text-gray-900 dark:text-gray-100 truncate">${search.name}</h4>
            ${search.is_public ? '<span class="inline-flex items-center px-2 py-0.5 rounded text-xs font-medium bg-green-100 text-green-800 dark:bg-green-900 dark:text-green-300">Public</span>' : ''}
          </div>
          <p class="text-sm text-gray-600 dark:text-gray-400 truncate mb-1">"${search.query}"</p>
          <div class="flex items-center gap-4 text-xs text-gray-500 dark:text-gray-400">
            ${filterCount > 0 ? `<span>${filterCount} filter${filterCount > 1 ? 's' : ''}</span>` : ''}
            <span>${new Date(search.updated_at).toLocaleDateString()}</span>
            ${search.user && this.showPublic ? `<span>by ${search.user.display_name || search.user.username}</span>` : ''}
          </div>
        </div>
        <div class="flex items-center gap-2 ml-4">
          <button 
            class="use-search-btn p-2 text-blue-600 hover:text-blue-800 dark:text-blue-400 dark:hover:text-blue-300 transition-colors"
            data-search-id="${search.id}"
            title="Use this search"
          >
            <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
              <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M21 21l-6-6m2-5a7 7 0 11-14 0 7 7 0 0114 0z" />
            </svg>
          </button>
          ${!this.showPublic ? `
            <button 
              class="delete-search-btn p-2 text-red-600 hover:text-red-800 dark:text-red-400 dark:hover:text-red-300 transition-colors"
              data-search-id="${search.id}"
              title="Delete this search"
            >
              <svg class="w-4 h-4" fill="none" viewBox="0 0 24 24" stroke="currentColor">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 7l-.867 12.142A2 2 0 0116.138 21H7.862a2 2 0 01-1.995-1.858L5 7m5 4v6m4-6v6m1-10V4a1 1 0 00-1-1h-4a1 1 0 00-1 1v3M4 7h16" />
              </svg>
            </button>
          ` : ''}
        </div>
      `;

      // Add event listeners
      const useButton = item.querySelector('.use-search-btn') as HTMLButtonElement;
      const deleteButton = item.querySelector('.delete-search-btn') as HTMLButtonElement;

      useButton?.addEventListener('click', (e) => {
        e.stopPropagation();
        this.useSearch(search);
      });

      deleteButton?.addEventListener('click', (e) => {
        e.stopPropagation();
        this.deleteSearch(search.id);
      });

      // Click on item to use search
      item.addEventListener('click', () => this.useSearch(search));

      return item;
    }

    private useSearch(search: SavedSearch) {
      // Dispatch event to apply the search
      const event = new CustomEvent('useSavedSearch', {
        detail: {
          query: search.query,
          filters: search.filters
        },
        bubbles: true
      });

      document.dispatchEvent(event);
    }

    private async deleteSearch(searchId: string) {
      if (!confirm('Are you sure you want to delete this saved search?')) {
        return;
      }

      try {
        const response = await fetch(`/api/search/saved?id=${searchId}`, {
          method: 'DELETE',
          headers: {
            'Authorization': 'Bearer ' + (localStorage.getItem('auth_token') || '')
          }
        });

        if (!response.ok) {
          throw new Error('Failed to delete saved search');
        }

        // Reload the list
        this.loadSavedSearches();
      } catch (error) {
        console.error('Error deleting saved search:', error);
        alert('Failed to delete saved search. Please try again.');
      }
    }

    private showSaveModal() {
      // Get current search query and filters
      const searchInput = document.getElementById('search-input') as HTMLInputElement;
      const query = searchInput?.value || '';

      if (!query.trim()) {
        alert('Please enter a search query first');
        return;
      }

      // Populate modal
      const queryDisplay = document.getElementById('search-query-display') as HTMLInputElement;
      queryDisplay.value = query;

      this.modal.classList.remove('hidden');
    }

    private hideSaveModal() {
      this.modal.classList.add('hidden');
      
      // Reset form
      const form = document.getElementById('save-search-form') as HTMLFormElement;
      form.reset();
    }

    private async handleSaveSearch(e: Event) {
      e.preventDefault();
      
      const form = e.target as HTMLFormElement;
      const formData = new FormData(form);
      
      const name = formData.get('name') as string;
      const isPublic = formData.has('isPublic');
      
      // Get current search query and filters
      const searchInput = document.getElementById('search-input') as HTMLInputElement;
      const query = searchInput?.value || '';
      
      // Get current filters (this would need to be implemented based on your filter system)
      const filters = this.getCurrentFilters();

      try {
        const response = await fetch('/api/search/saved', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'Authorization': 'Bearer ' + (localStorage.getItem('auth_token') || '')
          },
          body: JSON.stringify({
            name,
            query,
            filters,
            isPublic
          })
        });

        if (!response.ok) {
          const error = await response.json();
          throw new Error(error.error?.message || 'Failed to save search');
        }

        this.hideSaveModal();
        this.loadSavedSearches();
        
        // Show success message
        this.showNotification('Search saved successfully!');
      } catch (error) {
        console.error('Error saving search:', error);
        alert('Failed to save search: ' + error.message);
      }
    }

    private getCurrentFilters(): any {
      // This would integrate with your filter system
      // For now, return empty object
      return {};
    }

    private showError(message: string) {
      this.loadingState.classList.add('hidden');
      this.emptyState.classList.remove('hidden');
      
      const emptyStateTitle = this.emptyState.querySelector('h3');
      const emptyStateText = this.emptyState.querySelector('p');
      
      if (emptyStateTitle) emptyStateTitle.textContent = 'Error';
      if (emptyStateText) emptyStateText.textContent = message;
    }

    private showNotification(message: string) {
      // Create a simple notification
      const notification = document.createElement('div');
      notification.className = 'fixed top-4 right-4 bg-green-500 text-white px-4 py-2 rounded-md shadow-lg z-50 transition-opacity duration-300';
      notification.textContent = message;

      document.body.appendChild(notification);

      setTimeout(() => {
        notification.style.opacity = '0';
        setTimeout(() => {
          if (document.body.contains(notification)) {
            document.body.removeChild(notification);
          }
        }, 300);
      }, 3000);
    }
  }

  // Initialize when DOM is loaded
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', () => new SavedSearches());
  } else {
    new SavedSearches();
  }
</script>

<style>
  @keyframes pulse {
    0%, 100% {
      opacity: 1;
    }
    50% {
      opacity: .5;
    }
  }

  .animate-pulse {
    animation: pulse 2s cubic-bezier(0.4, 0, 0.6, 1) infinite;
  }
</style>