---
export interface Props {
  activities?: Array<{
    id: string;
    activityType: string;
    createdAt: string;
    metadata?: Record<string, any>;
    user: {
      id: string;
      username: string;
      displayName?: string;
      avatarUrl?: string;
    };
    media?: {
      id: string;
      title: string;
      mediaType: string;
      posterUrl?: string;
    };
  }>;
  currentUserId?: string;
  feedType?: 'personal' | 'following' | 'all';
  showLoadMore?: boolean;
}

const { 
  activities = [], 
  currentUserId, 
  feedType = 'personal',
  showLoadMore = true 
} = Astro.props;

// Helper function to format activity messages
const getActivityMessage = (activity: any) => {
  const user = activity.user;
  const displayName = user.displayName || user.username;
  const isCurrentUser = currentUserId === user.id;
  const userName = isCurrentUser ? 'You' : displayName;

  switch (activity.activityType || activity.activity_type) {
    case 'media_added':
    case 'added_to_list':
      const status = activity.metadata?.status;
      const statusText = status === 'plan_to_watch' ? 'plan to watch' : 
                        status === 'watching' ? 'currently watching' : 
                        status === 'completed' ? 'completed' : 'their list';
      return `${userName} added ${activity.media?.title} to ${statusText}`;
    case 'media_completed':
      return `${userName} completed ${activity.media?.title}`;
    case 'media_rated':
      const rating = activity.metadata?.rating;
      return `${userName} rated ${activity.media?.title}${rating ? ` ${rating}/10 stars` : ''}`;
    case 'review_created':
      return `${userName} wrote a review for ${activity.media?.title}`;
    case 'review_liked':
      const reviewUser = activity.metadata?.reviewUser;
      return `${userName} liked ${reviewUser ? `${reviewUser}'s` : 'a'} review of ${activity.media?.title}`;
    case 'user_followed':
      const followedUser = activity.metadata?.followedUser;
      return `${userName} started following ${followedUser}`;
    case 'media_status_updated':
    case 'updated_status':
      const newStatus = activity.metadata?.newStatus || activity.metadata?.status;
      const statusLabel = newStatus === 'plan_to_watch' ? 'planning to watch' :
                         newStatus === 'watching' ? 'currently watching' :
                         newStatus === 'completed' ? 'completed' :
                         newStatus === 'dropped' ? 'dropped' :
                         newStatus === 'on_hold' ? 'put on hold' : 'updated';
      return `${userName} marked ${activity.media?.title} as ${statusLabel}`;
    default:
      return `${userName} performed an action`;
  }
};

// Helper function to get activity icon
const getActivityIcon = (activityType: string) => {
  switch (activityType) {
    case 'media_added':
    case 'added_to_list':
      return 'M12 6v6m0 0v6m0-6h6m-6 0H6'; // Plus icon
    case 'media_completed':
      return 'M5 13l4 4L19 7'; // Check icon
    case 'media_rated':
      return 'M11.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z'; // Star icon
    case 'review_created':
      return 'M11 5H6a2 2 0 00-2 2v11a2 2 0 002 2h11a2 2 0 002-2v-5m-1.414-9.414a2 2 0 112.828 2.828L11.828 15H9v-2.828l8.586-8.586z'; // Edit icon
    case 'review_liked':
      return 'M4.318 6.318a4.5 4.5 0 000 6.364L12 20.364l7.682-7.682a4.5 4.5 0 00-6.364-6.364L12 7.636l-1.318-1.318a4.5 4.5 0 00-6.364 0z'; // Heart icon
    case 'user_followed':
      return 'M12 4.354a4 4 0 110 5.292M15 21H3v-1a6 6 0 0112 0v1zm0 0h6v-1a6 6 0 00-9-5.197m13.5-9a2.5 2.5 0 11-5 0 2.5 2.5 0 015 0z'; // User add icon
    case 'media_status_updated':
    case 'updated_status':
      return 'M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15'; // Refresh icon
    default:
      return 'M13 16h-1v-4h-1m1-4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z'; // Info icon
  }
};

// Helper function to get activity color
const getActivityColor = (activityType: string) => {
  switch (activityType) {
    case 'media_added':
    case 'added_to_list':
      return 'text-blue-600 bg-blue-100';
    case 'media_completed':
      return 'text-green-600 bg-green-100';
    case 'media_rated':
      return 'text-yellow-600 bg-yellow-100';
    case 'review_created':
      return 'text-purple-600 bg-purple-100';
    case 'review_liked':
      return 'text-red-600 bg-red-100';
    case 'user_followed':
      return 'text-indigo-600 bg-indigo-100';
    case 'media_status_updated':
    case 'updated_status':
      return 'text-orange-600 bg-orange-100';
    default:
      return 'text-gray-600 bg-gray-100';
  }
};

// Helper function to format time
const formatTime = (dateString: string) => {
  const date = new Date(dateString);
  const now = new Date();
  const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
  
  if (diffInHours < 1) {
    const minutes = Math.floor(diffInHours * 60);
    return `${minutes} minute${minutes !== 1 ? 's' : ''} ago`;
  } else if (diffInHours < 24) {
    const hours = Math.floor(diffInHours);
    return `${hours} hour${hours !== 1 ? 's' : ''} ago`;
  } else if (diffInHours < 24 * 7) {
    const days = Math.floor(diffInHours / 24);
    return `${days} day${days !== 1 ? 's' : ''} ago`;
  } else {
    return date.toLocaleDateString('en-US', {
      year: 'numeric',
      month: 'short',
      day: 'numeric'
    });
  }
};
---

<div class="activity-feed" data-feed-type={feedType}>
  <!-- Feed Header -->
  <div class="feed-header mb-6">
    <div class="flex items-center justify-between">
      <h2 class="text-xl font-semibold text-gray-900 dark:text-white">
        {feedType === 'personal' ? 'Your Activity' : 
         feedType === 'following' ? 'Following' : 
         'Community Activity'}
      </h2>
      
      <!-- Feed Type Selector -->
      {currentUserId && (
        <div class="feed-selector">
          <select 
            id="feedTypeSelector" 
            class="text-sm border border-gray-300 rounded-md px-3 py-1 bg-white dark:bg-gray-800 dark:border-gray-600 dark:text-white"
          >
            <option value="personal" selected={feedType === 'personal'}>Your Activity</option>
            <option value="following" selected={feedType === 'following'}>Following</option>
            <option value="all" selected={feedType === 'all'}>Community</option>
          </select>
        </div>
      )}
    </div>
  </div>

  <!-- Activities List -->
  <div class="activities-list space-y-4" id="activitiesList">
    {activities.length === 0 ? (
      <div class="empty-state text-center py-12">
        <div class="text-gray-400 dark:text-gray-500 mb-4">
          <svg class="mx-auto h-12 w-12" fill="none" viewBox="0 0 24 24" stroke="currentColor">
            <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10" />
          </svg>
        </div>
        <h3 class="text-lg font-medium text-gray-900 dark:text-white mb-2">No activity yet</h3>
        <p class="text-gray-500 dark:text-gray-400">
          {feedType === 'personal' ? 'Start tracking media to see your activity here.' :
           feedType === 'following' ? 'Follow users to see their activity in your feed.' :
           'No community activity to show.'}
        </p>
      </div>
    ) : (
      activities.map((activity) => (
        <article key={activity.id} class="activity-item bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4">
          <div class="flex items-start space-x-3">
            <!-- Activity Icon -->
            <div class={`flex-shrink-0 w-8 h-8 rounded-full flex items-center justify-center ${getActivityColor(activity.activityType || activity.activity_type)}`}>
              <svg class="w-4 h-4" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d={getActivityIcon(activity.activityType || activity.activity_type)} />
              </svg>
            </div>

            <!-- Activity Content -->
            <div class="flex-1 min-w-0">
              <div class="flex items-start justify-between">
                <div class="flex-1">
                  <!-- User Avatar and Name -->
                  <div class="flex items-center space-x-2 mb-2">
                    <div class="flex-shrink-0">
                      {activity.user.avatarUrl ? (
                        <img 
                          src={activity.user.avatarUrl} 
                          alt={`${activity.user.username}'s avatar`}
                          class="w-6 h-6 rounded-full object-cover"
                        />
                      ) : (
                        <div class="w-6 h-6 rounded-full bg-gray-300 dark:bg-gray-600 flex items-center justify-center">
                          <span class="text-xs font-medium text-gray-600 dark:text-gray-300">
                            {activity.user.username.charAt(0).toUpperCase()}
                          </span>
                        </div>
                      )}
                    </div>
                    <a 
                      href={`/user/${activity.user.username}`}
                      class="text-sm font-medium text-gray-900 dark:text-white hover:text-blue-600 dark:hover:text-blue-400"
                    >
                      {activity.user.displayName || activity.user.username}
                    </a>
                  </div>

                  <!-- Activity Message -->
                  <p class="text-sm text-gray-700 dark:text-gray-300 mb-2">
                    {getActivityMessage(activity)}
                  </p>

                  <!-- Additional Activity Details -->
                  {activity.metadata?.rating && (
                    <div class="flex items-center mb-2">
                      <div class="flex items-center">
                        {Array.from({ length: 5 }, (_, i) => (
                          <svg 
                            key={i}
                            class={`w-4 h-4 ${i < Math.floor(activity.metadata.rating / 2) ? 'text-yellow-400' : 'text-gray-300'}`}
                            fill="currentColor" 
                            viewBox="0 0 20 20"
                          >
                            <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.519 4.674a1 1 0 00.95.69h4.915c.969 0 1.371 1.24.588 1.81l-3.976 2.888a1 1 0 00-.363 1.118l1.518 4.674c.3.922-.755 1.688-1.538 1.118l-3.976-2.888a1 1 0 00-1.176 0l-3.976 2.888c-.783.57-1.838-.197-1.538-1.118l1.518-4.674a1 1 0 00-.363-1.118l-3.976-2.888c-.784-.57-.38-1.81.588-1.81h4.914a1 1 0 00.951-.69l1.519-4.674z" />
                          </svg>
                        ))}
                        <span class="ml-2 text-sm text-gray-600 dark:text-gray-400">
                          {activity.metadata.rating}/10
                        </span>
                      </div>
                    </div>
                  )}

                  <!-- Review Preview -->
                  {(activity.activityType === 'review_created' || activity.activity_type === 'review_created') && activity.metadata?.reviewContent && (
                    <div class="mb-2 p-3 bg-blue-50 dark:bg-blue-900/20 rounded-lg border-l-4 border-blue-400">
                      <p class="text-sm text-gray-700 dark:text-gray-300 italic">
                        "{activity.metadata.reviewContent.substring(0, 120)}{activity.metadata.reviewContent.length > 120 ? '...' : ''}"
                      </p>
                    </div>
                  )}

                  <!-- Media Info (if applicable) -->
                  {activity.media && (
                    <div class="flex items-center space-x-3 p-3 bg-gray-50 dark:bg-gray-700 rounded-lg hover:bg-gray-100 dark:hover:bg-gray-600 transition-colors">
                      {activity.media.posterUrl && (
                        <img 
                          src={activity.media.posterUrl} 
                          alt={`${activity.media.title} poster`}
                          class="w-12 h-16 object-cover rounded shadow-sm"
                        />
                      )}
                      <div class="flex-1 min-w-0">
                        <h4 class="text-sm font-medium text-gray-900 dark:text-white truncate">
                          <a 
                            href={`/media/${activity.media.mediaType}/${activity.media.id}`}
                            class="hover:text-blue-600 dark:hover:text-blue-400 transition-colors"
                          >
                            {activity.media.title}
                          </a>
                        </h4>
                        <p class="text-xs text-gray-500 dark:text-gray-400 capitalize">
                          {activity.media.mediaType === 'tv' ? 'TV Show' : activity.media.mediaType}
                        </p>
                        
                        <!-- Media genres if available -->
                        {activity.metadata?.genres && (
                          <div class="flex flex-wrap gap-1 mt-1">
                            {activity.metadata.genres.slice(0, 3).map((genre: string) => (
                              <span 
                                key={genre}
                                class="inline-block px-2 py-1 text-xs bg-gray-200 dark:bg-gray-600 text-gray-700 dark:text-gray-300 rounded"
                              >
                                {genre}
                              </span>
                            ))}
                          </div>
                        )}
                      </div>
                    </div>
                  )}
                </div>

                <!-- Timestamp -->
                <time 
                  datetime={activity.createdAt} 
                  class="text-xs text-gray-500 dark:text-gray-400 flex-shrink-0"
                  title={new Date(activity.createdAt).toLocaleString()}
                >
                  {formatTime(activity.createdAt)}
                </time>
              </div>
            </div>
          </div>
        </article>
      ))
    )}
  </div>

  <!-- Load More Button -->
  {showLoadMore && activities.length > 0 && (
    <div class="load-more-container mt-6 text-center">
      <button
        type="button"
        id="loadMoreBtn"
        class="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-300 bg-white dark:bg-gray-800 hover:bg-gray-50 dark:hover:bg-gray-700 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-blue-500"
      >
        <svg class="w-4 h-4 mr-2" fill="none" stroke="currentColor" viewBox="0 0 24 24">
          <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M4 4v5h.582m15.356 2A8.001 8.001 0 004.582 9m0 0H9m11 11v-5h-.581m0 0a8.003 8.003 0 01-15.357-2m15.357 2H15" />
        </svg>
        Load More
      </button>
    </div>
  )}

  <!-- Loading State -->
  <div id="loadingState" class="loading-state hidden text-center py-8">
    <div class="inline-flex items-center">
      <svg class="animate-spin -ml-1 mr-3 h-5 w-5 text-blue-600" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24">
        <circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle>
        <path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8V0C5.373 0 0 5.373 0 12h4zm2 5.291A7.962 7.962 0 014 12H0c0 3.042 1.135 5.824 3 7.938l3-2.647z"></path>
      </svg>
      <span class="text-gray-600 dark:text-gray-400">Loading activities...</span>
    </div>
  </div>
</div>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    let currentPage = 1;
    let isLoading = false;
    
    const feedTypeSelector = document.getElementById('feedTypeSelector') as HTMLSelectElement;
    const loadMoreBtn = document.getElementById('loadMoreBtn');
    const activitiesList = document.getElementById('activitiesList');
    const loadingState = document.getElementById('loadingState');
    const activityFeed = document.querySelector('.activity-feed') as HTMLElement;

    // Handle feed type change
    if (feedTypeSelector) {
      feedTypeSelector.addEventListener('change', async (e) => {
        const newFeedType = (e.target as HTMLSelectElement).value;
        await loadActivities(newFeedType, 1, true);
      });
    }

    // Handle load more
    if (loadMoreBtn) {
      loadMoreBtn.addEventListener('click', async () => {
        const feedType = activityFeed?.dataset.feedType || 'personal';
        await loadActivities(feedType, currentPage + 1, false);
      });
    }

    // Load activities function
    async function loadActivities(feedType: string, page: number, replace: boolean = false) {
      if (isLoading) return;
      
      isLoading = true;
      
      if (loadingState) {
        loadingState.classList.remove('hidden');
      }
      
      if (loadMoreBtn) {
        loadMoreBtn.disabled = true;
      }

      try {
        const response = await fetch(`/api/user/activities?feedType=${feedType}&page=${page}&limit=20`);
        const result = await response.json();

        if (result.success && result.data) {
          if (replace) {
            // Replace all activities
            if (activitiesList) {
              activitiesList.innerHTML = '';
              currentPage = 1;
            }
          }

          // Add new activities
          result.data.forEach((activity: any) => {
            const activityElement = createActivityElement(activity);
            if (activitiesList) {
              activitiesList.appendChild(activityElement);
            }
          });

          currentPage = page;

          // Hide load more if no more data
          if (loadMoreBtn && result.data.length < 20) {
            loadMoreBtn.style.display = 'none';
          }

          // Update feed type in dataset
          if (activityFeed) {
            activityFeed.dataset.feedType = feedType;
          }
        } else {
          console.error('Failed to load activities:', result.error);
        }
      } catch (error) {
        console.error('Error loading activities:', error);
      } finally {
        isLoading = false;
        
        if (loadingState) {
          loadingState.classList.add('hidden');
        }
        
        if (loadMoreBtn) {
          loadMoreBtn.disabled = false;
        }
      }
    }

    // Create activity element (simplified version)
    function createActivityElement(activity: any): HTMLElement {
      const article = document.createElement('article');
      article.className = 'activity-item bg-white dark:bg-gray-800 rounded-lg shadow-sm border border-gray-200 dark:border-gray-700 p-4';
      
      // This is a simplified version - in a real implementation, you'd want to
      // recreate the full HTML structure from the Astro template
      article.innerHTML = `
        <div class="flex items-center space-x-3">
          <div class="text-sm text-gray-700 dark:text-gray-300">
            ${getActivityMessage(activity)}
          </div>
          <time class="text-xs text-gray-500 dark:text-gray-400">
            ${formatTime(activity.created_at)}
          </time>
        </div>
      `;
      
      return article;
    }

    // Helper functions (simplified versions of the Astro functions)
    function getActivityMessage(activity: any): string {
      const user = activity.user;
      const displayName = user.display_name || user.username;
      
      switch (activity.activity_type) {
        case 'media_added':
          return `${displayName} added ${activity.media?.title} to their list`;
        case 'media_completed':
          return `${displayName} completed ${activity.media?.title}`;
        case 'media_rated':
          const rating = activity.metadata?.rating;
          return `${displayName} rated ${activity.media?.title}${rating ? ` ${rating}/10` : ''}`;
        case 'review_created':
          return `${displayName} wrote a review for ${activity.media?.title}`;
        default:
          return `${displayName} performed an action`;
      }
    }

    function formatTime(dateString: string): string {
      const date = new Date(dateString);
      const now = new Date();
      const diffInHours = (now.getTime() - date.getTime()) / (1000 * 60 * 60);
      
      if (diffInHours < 1) {
        const minutes = Math.floor(diffInHours * 60);
        return `${minutes}m ago`;
      } else if (diffInHours < 24) {
        const hours = Math.floor(diffInHours);
        return `${hours}h ago`;
      } else {
        const days = Math.floor(diffInHours / 24);
        return `${days}d ago`;
      }
    }
  });
</script>

<style>
  .activity-feed {
    max-width: 100%;
  }
  
  .activity-item {
    transition: all 0.2s ease-in-out;
  }
  
  .activity-item:hover {
    transform: translateY(-1px);
    box-shadow: 0 4px 12px rgba(0, 0, 0, 0.1);
  }
  
  .loading-state {
    opacity: 0.7;
  }
  
  @media (max-width: 640px) {
    .activity-item {
      padding: 1rem;
    }
    
    .feed-header {
      flex-direction: column;
      gap: 1rem;
    }
  }
</style>