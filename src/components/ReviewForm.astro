---
import RatingComponent from './RatingComponent.astro';
import { getAuthHeader } from '../lib/auth';

export interface Props {
  mediaId: string;
  mediaType: string;
  mediaTitle: string;
  existingReview?: {
    id: string;
    rating?: number;
    title?: string;
    content: string;
    spoilerWarning: boolean;
  };
  isEditing?: boolean;
}

const { 
  mediaId, 
  mediaType, 
  mediaTitle, 
  existingReview,
  isEditing = false 
} = Astro.props;
---

<div class="review-form-container bg-white rounded-lg shadow-md p-6 mb-6">
  <h3 class="text-lg font-semibold mb-4">
    {isEditing ? 'Edit Your Review' : 'Write a Review'} for {mediaTitle}
  </h3>
  
  <form id="reviewForm" class="space-y-4">
    <input type="hidden" name="mediaId" value={mediaId} />
    <input type="hidden" name="mediaType" value={mediaType} />
    {existingReview && <input type="hidden" name="reviewId" value={existingReview.id} />}
    
    <!-- Rating Section -->
    <div class="rating-section">
      <label class="block text-sm font-medium text-gray-700 mb-2">
        Rating (optional)
      </label>
      <div class="flex items-center gap-4">
        <RatingComponent 
          rating={existingReview?.rating || 0}
          maxRating={10}
          size="lg"
          showValue={true}
          onRatingChange="handleRatingChange"
        />
        <span class="text-sm text-gray-500">Click stars to rate</span>
      </div>
    </div>
    
    <!-- Review Title -->
    <div class="title-section">
      <label for="reviewTitle" class="block text-sm font-medium text-gray-700 mb-2">
        Review Title (optional)
      </label>
      <input
        type="text"
        id="reviewTitle"
        name="title"
        value={existingReview?.title || ''}
        placeholder="Give your review a catchy title..."
        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent"
        maxlength="200"
      />
      <div class="text-xs text-gray-500 mt-1">
        <span id="titleCharCount">0</span>/200 characters
      </div>
    </div>
    
    <!-- Review Content -->
    <div class="content-section">
      <label for="reviewContent" class="block text-sm font-medium text-gray-700 mb-2">
        Review Content *
      </label>
      <textarea
        id="reviewContent"
        name="content"
        required
        placeholder="Share your thoughts about this ${mediaType}..."
        class="w-full px-3 py-2 border border-gray-300 rounded-md focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-transparent resize-vertical"
        rows="6"
        minlength="10"
        maxlength="2000"
      >{existingReview?.content || ''}</textarea>
      <div class="text-xs text-gray-500 mt-1">
        <span id="contentCharCount">0</span>/2000 characters (minimum 10)
      </div>
    </div>
    
    <!-- Spoiler Warning -->
    <div class="spoiler-section">
      <label class="flex items-center gap-2">
        <input
          type="checkbox"
          id="spoilerWarning"
          name="spoilerWarning"
          checked={existingReview?.spoilerWarning || false}
          class="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
        />
        <span class="text-sm text-gray-700">
          This review contains spoilers
        </span>
      </label>
      <p class="text-xs text-gray-500 mt-1">
        Check this if your review reveals plot details that might spoil the experience for others.
      </p>
    </div>
    
    <!-- Form Actions -->
    <div class="form-actions flex gap-3 pt-4 border-t">
      <button
        type="submit"
        id="submitBtn"
        class="bg-blue-600 text-white px-6 py-2 rounded-md hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2 disabled:opacity-50 disabled:cursor-not-allowed transition-colors"
      >
        <span class="submit-text">{isEditing ? 'Update Review' : 'Submit Review'}</span>
        <span class="loading-text hidden">Submitting...</span>
      </button>
      
      <button
        type="button"
        id="cancelBtn"
        class="bg-gray-300 text-gray-700 px-6 py-2 rounded-md hover:bg-gray-400 focus:outline-none focus:ring-2 focus:ring-gray-500 focus:ring-offset-2 transition-colors"
      >
        Cancel
      </button>
      
      {isEditing && (
        <button
          type="button"
          id="deleteBtn"
          class="bg-red-600 text-white px-6 py-2 rounded-md hover:bg-red-700 focus:outline-none focus:ring-2 focus:ring-red-500 focus:ring-offset-2 transition-colors ml-auto"
        >
          Delete Review
        </button>
      )}
    </div>
    
    <!-- Error/Success Messages -->
    <div id="formMessage" class="hidden p-3 rounded-md"></div>
  </form>
</div>

<script>
  let currentRating = 0;
  
  // Handle rating changes
  window.handleRatingChange = function(rating) {
    currentRating = rating;
  };
  
  // Type declaration for getAuthHeader
  declare global {
    interface Window {
      getAuthHeader?: () => Promise<Record<string, string>>;
    }
  }
  
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('reviewForm') as HTMLFormElement;
    const titleInput = document.getElementById('reviewTitle') as HTMLInputElement;
    const contentTextarea = document.getElementById('reviewContent') as HTMLTextAreaElement;
    const titleCharCount = document.getElementById('titleCharCount') as HTMLElement;
    const contentCharCount = document.getElementById('contentCharCount') as HTMLElement;
    const submitBtn = document.getElementById('submitBtn') as HTMLButtonElement;
    const cancelBtn = document.getElementById('cancelBtn') as HTMLButtonElement;
    const deleteBtn = document.getElementById('deleteBtn') as HTMLButtonElement;
    const formMessage = document.getElementById('formMessage') as HTMLElement;
    
    // Initialize character counts
    updateCharCount(titleInput, titleCharCount);
    updateCharCount(contentTextarea, contentCharCount);
    
    // Character count updates
    titleInput?.addEventListener('input', () => updateCharCount(titleInput, titleCharCount));
    contentTextarea?.addEventListener('input', () => updateCharCount(contentTextarea, contentCharCount));
    
    // Form validation
    function validateForm() {
      const content = contentTextarea.value.trim();
      const isValid = content.length >= 10 && content.length <= 2000;
      
      if (submitBtn) {
        submitBtn.disabled = !isValid;
      }
      return isValid;
    }
    
    contentTextarea.addEventListener('input', validateForm);
    validateForm(); // Initial validation
    
    // Form submission
    form?.addEventListener('submit', async (e) => {
      e.preventDefault();
      
      if (!validateForm()) {
        showMessage('Please ensure your review content is between 10 and 2000 characters.', 'error');
        return;
      }
      
      const formData = new FormData(form);
      const reviewData = {
        mediaId: formData.get('mediaId'),
        mediaType: formData.get('mediaType'),
        rating: currentRating || null,
        title: formData.get('title') || null,
        content: formData.get('content'),
        spoilerWarning: formData.get('spoilerWarning') === 'on'
      };
      
      const reviewId = formData.get('reviewId');
      const isEditing = !!reviewId;
      
      try {
        setLoading(true);
        
        // Get authentication header
        const authHeader = await (window as any).getAuthHeader?.() || {};
        
        const response = await fetch('/api/reviews', {
          method: isEditing ? 'PUT' : 'POST',
          headers: {
            'Content-Type': 'application/json',
            ...authHeader
          },
          body: JSON.stringify(isEditing ? { ...reviewData, id: reviewId } : reviewData)
        });
        
        const result = await response.json();
        
        if (result.success) {
          showMessage(
            isEditing ? 'Review updated successfully!' : 'Review submitted successfully!', 
            'success'
          );
          
          // Refresh the page after a short delay to show the new/updated review
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showMessage(result.error?.message || 'Failed to save review. Please try again.', 'error');
        }
      } catch (error) {
        console.error('Error submitting review:', error);
        showMessage('Network error. Please check your connection and try again.', 'error');
      } finally {
        setLoading(false);
      }
    });
    
    // Cancel button
    cancelBtn?.addEventListener('click', () => {
      if (confirm('Are you sure you want to cancel? Any unsaved changes will be lost.')) {
        // Hide the form or redirect back
        const container = document.querySelector('.review-form-container') as HTMLElement;
        if (container) {
          container.style.display = 'none';
        }
      }
    });
    
    // Delete button (for editing)
    deleteBtn?.addEventListener('click', async () => {
      if (!confirm('Are you sure you want to delete this review? This action cannot be undone.')) {
        return;
      }
      
      const reviewId = form.querySelector('input[name="reviewId"]') as HTMLInputElement;
      if (!reviewId) return;
      
      try {
        // Get authentication header
        const authHeader = await (window as any).getAuthHeader?.() || {};
        
        const response = await fetch('/api/reviews', {
          method: 'DELETE',
          headers: {
            'Content-Type': 'application/json',
            ...authHeader
          },
          body: JSON.stringify({ id: reviewId.value })
        });
        
        const result = await response.json();
        
        if (result.success) {
          showMessage('Review deleted successfully!', 'success');
          setTimeout(() => {
            window.location.reload();
          }, 1500);
        } else {
          showMessage(result.error?.message || 'Failed to delete review.', 'error');
        }
      } catch (error) {
        console.error('Error deleting review:', error);
        showMessage('Network error. Please try again.', 'error');
      }
    });
    
    // Helper functions
    function updateCharCount(input, countElement) {
      if (input && countElement) {
        countElement.textContent = input.value.length;
      }
    }
    
    function setLoading(loading) {
      if (!submitBtn) return;
      
      const submitText = submitBtn.querySelector('.submit-text') as HTMLElement;
      const loadingText = submitBtn.querySelector('.loading-text') as HTMLElement;
      
      if (loading) {
        submitBtn.disabled = true;
        submitText?.classList.add('hidden');
        loadingText?.classList.remove('hidden');
      } else {
        submitBtn.disabled = false;
        submitText?.classList.remove('hidden');
        loadingText?.classList.add('hidden');
      }
    }
    
    function showMessage(message, type) {
      if (!formMessage) return;
      
      formMessage.textContent = message;
      formMessage.className = `p-3 rounded-md ${
        type === 'success' 
          ? 'bg-green-100 text-green-800 border border-green-200' 
          : 'bg-red-100 text-red-800 border border-red-200'
      }`;
      formMessage.classList.remove('hidden');
      
      // Auto-hide after 5 seconds
      setTimeout(() => {
        formMessage.classList.add('hidden');
      }, 5000);
    }
  });
</script>