---
export interface Props {
  fallback?: string;
  showDetails?: boolean;
}

const { fallback, showDetails = false } = Astro.props;
---

<div class="error-boundary" data-fallback={fallback} data-show-details={showDetails}>
  <slot />
</div>

<script>
  class ErrorBoundary {
    private container: HTMLElement;
    private fallback: string;
    private showDetails: boolean;

    constructor(container: HTMLElement) {
      this.container = container;
      this.fallback = container.dataset.fallback || 'default';
      this.showDetails = container.dataset.showDetails === 'true';
      this.init();
    }

    private init() {
      // Catch JavaScript errors in this component's children
      window.addEventListener('error', this.handleError.bind(this));
      window.addEventListener('unhandledrejection', this.handlePromiseRejection.bind(this));
    }

    private handleError(event: ErrorEvent) {
      if (this.isErrorInContainer(event.target as Element)) {
        this.renderErrorUI(event.error);
        event.preventDefault();
      }
    }

    private handlePromiseRejection(event: PromiseRejectionEvent) {
      // For promise rejections, we can't easily determine the source,
      // so we'll handle them globally
      console.error('Unhandled promise rejection:', event.reason);
    }

    private isErrorInContainer(target: Element | null): boolean {
      if (!target) return false;
      return this.container.contains(target);
    }

    private renderErrorUI(error: Error) {
      const errorHTML = this.getErrorHTML(error);
      this.container.innerHTML = errorHTML;
    }

    private getErrorHTML(error: Error): string {
      switch (this.fallback) {
        case 'minimal':
          return `
            <div class="p-4 bg-red-50 border border-red-200 rounded-lg">
              <p class="text-sm text-red-800">Something went wrong. Please try again.</p>
            </div>
          `;
        
        case 'detailed':
          return `
            <div class="p-6 bg-red-50 border border-red-200 rounded-lg">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg class="h-5 w-5 text-red-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z" clip-rule="evenodd" />
                  </svg>
                </div>
                <div class="ml-3">
                  <h3 class="text-sm font-medium text-red-800">An error occurred</h3>
                  <div class="mt-2 text-sm text-red-700">
                    <p>We encountered an unexpected error. Please try refreshing the page.</p>
                    ${this.showDetails ? `
                      <details class="mt-2">
                        <summary class="cursor-pointer font-medium">Error details</summary>
                        <pre class="mt-2 text-xs bg-red-100 p-2 rounded overflow-auto">${error.message}\n${error.stack}</pre>
                      </details>
                    ` : ''}
                  </div>
                  <div class="mt-4">
                    <button 
                      onclick="window.location.reload()" 
                      class="bg-red-100 px-3 py-2 rounded-md text-sm font-medium text-red-800 hover:bg-red-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-red-500"
                    >
                      Refresh Page
                    </button>
                  </div>
                </div>
              </div>
            </div>
          `;
        
        case 'network':
          return `
            <div class="p-6 bg-yellow-50 border border-yellow-200 rounded-lg">
              <div class="flex">
                <div class="flex-shrink-0">
                  <svg class="h-5 w-5 text-yellow-400" viewBox="0 0 20 20" fill="currentColor">
                    <path fill-rule="evenodd" d="M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 002 0V6a1 1 0 00-1-1z" clip-rule="evenodd" />
                  </svg>
                </div>
                <div class="ml-3">
                  <h3 class="text-sm font-medium text-yellow-800">Connection Problem</h3>
                  <div class="mt-2 text-sm text-yellow-700">
                    <p>Unable to connect to the server. Please check your internet connection and try again.</p>
                  </div>
                  <div class="mt-4 flex space-x-2">
                    <button 
                      onclick="window.location.reload()" 
                      class="bg-yellow-100 px-3 py-2 rounded-md text-sm font-medium text-yellow-800 hover:bg-yellow-200 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500"
                    >
                      Try Again
                    </button>
                    <button 
                      onclick="history.back()" 
                      class="bg-white px-3 py-2 rounded-md text-sm font-medium text-yellow-800 border border-yellow-300 hover:bg-yellow-50 focus:outline-none focus:ring-2 focus:ring-offset-2 focus:ring-yellow-500"
                    >
                      Go Back
                    </button>
                  </div>
                </div>
              </div>
            </div>
          `;
        
        default:
          return `
            <div class="p-4 bg-gray-50 border border-gray-200 rounded-lg">
              <div class="flex items-center">
                <svg class="h-5 w-5 text-gray-400 mr-3" fill="none" stroke="currentColor" viewBox="0 0 24 24">
                  <path stroke-linecap="round" stroke-linejoin="round" stroke-width="2" d="M12 8v4m0 4h.01M21 12a9 9 0 11-18 0 9 9 0 0118 0z" />
                </svg>
                <p class="text-sm text-gray-600">Content temporarily unavailable</p>
                <button 
                  onclick="window.location.reload()" 
                  class="ml-auto text-sm text-blue-600 hover:text-blue-500 font-medium"
                >
                  Retry
                </button>
              </div>
            </div>
          `;
      }
    }
  }

  // Initialize error boundaries
  document.addEventListener('DOMContentLoaded', () => {
    const errorBoundaries = document.querySelectorAll('.error-boundary');
    errorBoundaries.forEach(boundary => {
      new ErrorBoundary(boundary as HTMLElement);
    });
  });
</script>