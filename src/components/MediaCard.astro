---
import LazyImage from "./LazyImage.astro";
import AddToListButton from "./AddToListButton.astro";
import { getCurrentUser } from "../lib/supabase";
import type { UserMediaStatus, MediaType } from "../types/database";

interface Props {
  id: string;
  title: string;
  type: MediaType;
  year?: number;
  poster?: string;
  description?: string;
  rating?: number;
  source: "tmdb" | "openlibrary" | "jikan";
  onAdd?: boolean;
  lazy?: boolean;
  class?: string;
  // User status data
  userStatus?: UserMediaStatus | null;
  mediaId?: string; // Internal media ID if item is already in database
}

const {
  id,
  title,
  type,
  year,
  poster,
  description,
  rating,
  source,
  onAdd = true,
  lazy = true,
  class: className = "",
  userStatus = null,
  mediaId = null,
} = Astro.props;

// Check if user is authenticated
let user: any = null;
try {
  user = await getCurrentUser();
} catch (error) {
  // User not authenticated, continue without user data
}

const typeColors = {
  movie: "bg-blue-100 text-blue-800",
  tv: "bg-purple-100 text-purple-800",
  book: "bg-green-100 text-green-800",
  anime: "bg-orange-100 text-orange-800",
  manga: "bg-pink-100 text-pink-800",
};

const typeLabels = {
  movie: "Movie",
  tv: "TV Show",
  book: "Book",
  anime: "Anime",
  manga: "Manga",
};

// Create the detail page URL
const detailUrl = `/media/${type}/${id}`;
---

<div
  class={`media-card bg-white dark:bg-gray-800 rounded-lg shadow-md overflow-hidden hover:shadow-lg transition-shadow duration-200 group cursor-pointer ${className}`}
  data-detail-url={detailUrl}
>
  <div class="flex flex-col sm:flex-row">
    <!-- Poster/Cover Image -->
    <div class="w-full h-48 sm:w-24 sm:h-36 flex-shrink-0">
      <LazyImage
        src={poster}
        alt={`${title} poster`}
        width={96}
        height={144}
        lazy={lazy}
        class="w-full h-full object-cover sm:rounded-l-lg rounded-t-lg sm:rounded-t-none"
      />
    </div>

    <!-- Content -->
    <div class="flex-1 p-3 sm:p-4">
      <div class="flex items-start justify-between mb-2">
        <div class="flex-1">
          <h3
            class="font-semibold text-gray-900 dark:text-gray-100 line-clamp-2 mb-1 text-sm sm:text-base"
          >
            {title}
          </h3>
          <div class="flex flex-wrap items-center gap-1 sm:gap-2 mb-2">
            <span
              class={`inline-flex items-center px-2 py-1 rounded-full text-xs font-medium ${typeColors[type]}`}
            >
              {typeLabels[type]}
            </span>
            {
              year && (
                <span class="text-xs sm:text-sm text-gray-500 dark:text-gray-400">
                  {year}
                </span>
              )
            }
            {
              rating && (
                <div class="flex items-center gap-1">
                  <svg
                    class="w-3 h-3 sm:w-4 sm:h-4 text-yellow-400"
                    fill="currentColor"
                    viewBox="0 0 20 20"
                  >
                    <path d="M9.049 2.927c.3-.921 1.603-.921 1.902 0l1.07 3.292a1 1 0 00.95.69h3.462c.969 0 1.371 1.24.588 1.81l-2.8 2.034a1 1 0 00-.364 1.118l1.07 3.292c.3.921-.755 1.688-1.54 1.118l-2.8-2.034a1 1 0 00-1.175 0l-2.8 2.034c-.784.57-1.838-.197-1.539-1.118l1.07-3.292a1 1 0 00-.364-1.118L2.98 8.72c-.783-.57-.38-1.81.588-1.81h3.461a1 1 0 00.951-.69l1.07-3.292z" />
                  </svg>
                  <span class="text-xs sm:text-sm text-gray-600 dark:text-gray-400">
                    {rating.toFixed(1)}
                  </span>
                </div>
              )
            }
          </div>
        </div>

        {
          onAdd && user && (
            <div class="ml-2 flex-shrink-0">
              <AddToListButton
                mediaId={mediaId || `${source}_${id}`}
                mediaType={type}
                currentStatus={userStatus}
                externalId={id}
                title={title}
                description={description}
                posterUrl={poster}
                releaseDate={year ? `${year}-01-01` : undefined}
                genres={[]}
                metadata={{
                  source,
                  rating,
                  year,
                }}
              />
            </div>
          )
        }

        {
          onAdd && !user && (
            <button
              class="login-prompt-btn ml-2 px-2 py-1 sm:px-3 sm:py-1 bg-blue-600 text-white text-xs sm:text-sm rounded-md hover:bg-blue-700 transition-colors duration-200 min-h-[44px] sm:min-h-auto flex items-center gap-1"
              data-media-title={title}
              data-media-type={type}
              data-external-id={id}
              data-poster={poster}
              data-year={year}
              data-source={source}
              data-description={description}
            >
              <span class="text-lg">+</span>
              <span>Add</span>
            </button>
          )
        }
      </div>

      {
        description && (
          <p class="text-xs sm:text-sm text-gray-600 dark:text-gray-400 line-clamp-2 sm:line-clamp-3">
            {description}
          </p>
        )
      }

      <div
        class="mt-1 sm:mt-2 text-xs text-gray-400 dark:text-gray-500 capitalize"
      >
        via {source}
      </div>
    </div>
  </div>
</div>

<script>
  // Handle login prompt for unauthenticated users
  document.addEventListener("click", (e) => {
    const button = e.target as HTMLElement;
    if (button.classList.contains("login-prompt-btn") || button.closest(".login-prompt-btn")) {
      e.preventDefault();
      e.stopPropagation();
      
      const btnElement = button.classList.contains("login-prompt-btn") ? button : button.closest(".login-prompt-btn") as HTMLElement;
      const mediaTitle = btnElement.dataset.mediaTitle;
      const mediaType = btnElement.dataset.mediaType;
      const externalId = btnElement.dataset.externalId;
      const poster = btnElement.dataset.poster;
      const year = btnElement.dataset.year;
      const source = btnElement.dataset.source;
      const description = btnElement.dataset.description;

      // Store media information for after login
      const mediaInfo = {
        title: mediaTitle,
        type: mediaType,
        externalId: externalId,
        poster: poster,
        year: year,
        source: source,
        description: description,
        action: 'add_to_list'
      };

      // Show login modal or redirect to login page
      const shouldRedirect = confirm(
        `Please log in to add "${mediaTitle}" to your list. Would you like to go to the login page?`
      );

      if (shouldRedirect) {
        // Store the current page URL and media info to handle after login
        sessionStorage.setItem("redirectAfterLogin", window.location.href);
        sessionStorage.setItem("pendingMediaAction", JSON.stringify(mediaInfo));
        window.location.href = "/login";
      }
    }
  });

  // Handle card click navigation (avoid conflicts with button clicks)
  document.addEventListener("click", (e) => {
    const card = (e.target as HTMLElement).closest(".media-card");
    if (!card) return;

    // Don't navigate if clicking on buttons or interactive elements
    const isInteractiveElement = (e.target as HTMLElement).closest(
      "button, a, .add-to-list-container, .login-prompt-btn, .status-dropdown, .status-option"
    );
    if (isInteractiveElement) return;

    // Navigate to detail page
    const detailUrl = card.getAttribute("data-detail-url");
    if (detailUrl) {
      window.location.href = detailUrl;
    }
  });

  // Handle pending media actions after login
  document.addEventListener("DOMContentLoaded", () => {
    const pendingAction = sessionStorage.getItem("pendingMediaAction");
    if (pendingAction) {
      try {
        const mediaInfo = JSON.parse(pendingAction);
        if (mediaInfo.action === 'add_to_list') {
          // Show a notification or automatically add the item
          const shouldAdd = confirm(
            `Would you like to add "${mediaInfo.title}" to your list now?`
          );
          
          if (shouldAdd) {
            // Call the add to list API
            fetch('/api/user/media', {
              method: 'POST',
              headers: {
                'Content-Type': 'application/json',
              },
              body: JSON.stringify({
                externalId: mediaInfo.externalId,
                mediaType: mediaInfo.type,
                title: mediaInfo.title,
                description: mediaInfo.description,
                posterUrl: mediaInfo.poster,
                releaseDate: mediaInfo.year ? `${mediaInfo.year}-01-01` : undefined,
                genres: [],
                metadata: { 
                  source: mediaInfo.source, 
                  rating: 0, 
                  year: mediaInfo.year 
                },
                status: 'plan_to_watch'
              }),
            })
            .then(response => response.json())
            .then(result => {
              if (result.success) {
                alert(`"${mediaInfo.title}" has been added to your list!`);
                // Refresh the page to show updated status
                window.location.reload();
              } else {
                alert(`Failed to add "${mediaInfo.title}" to your list. Please try again.`);
              }
            })
            .catch(error => {
              console.error('Error adding to list:', error);
              alert(`Failed to add "${mediaInfo.title}" to your list. Please try again.`);
            });
          }
        }
        
        // Clear the pending action
        sessionStorage.removeItem("pendingMediaAction");
      } catch (error) {
        console.error('Error handling pending media action:', error);
        sessionStorage.removeItem("pendingMediaAction");
      }
    }
  });
</script>

<style>
  .line-clamp-2 {
    display: -webkit-box;
    -webkit-line-clamp: 2;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }

  .line-clamp-3 {
    display: -webkit-box;
    -webkit-line-clamp: 3;
    -webkit-box-orient: vertical;
    overflow: hidden;
  }
</style>
